// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Proxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "Cache.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Test;
using namespace  ::std;

class ProxyHandler : virtual public ProxyIf {
 

  public:
  // Cache selection, uncomment the cache policy you want to use
  MAXS_Cache web_cache;
  //FIFO_Cache web_cache;
  //Random_Cache web_cache;
	  

  ProxyHandler() {
    // Your initialization goes here
      
  }

  int32_t ping() {       //Used as connection testing
    printf("ping\n");
    return 1;
  }

  void getResult(std::string& _return, const std::string& url) {
    // Print the request url
    cout << "Receive URL request: " << url << endl;
    
    _return = web_cache.getContent(url);
    
    cout << "Response sent for URL: " << url << endl;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ProxyHandler> handler(new ProxyHandler());
  shared_ptr<TProcessor> processor(new ProxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

