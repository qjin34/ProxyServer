/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Proxy_H
#define Proxy_H

#include <thrift/TDispatchProcessor.h>
#include "proxy_types.h"

namespace Test {

class ProxyIf {
 public:
  virtual ~ProxyIf() {}
  virtual int32_t ping() = 0;
  virtual void getResult(std::string& _return, const std::string& url) = 0;
};

class ProxyIfFactory {
 public:
  typedef ProxyIf Handler;

  virtual ~ProxyIfFactory() {}

  virtual ProxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProxyIf* /* handler */) = 0;
};

class ProxyIfSingletonFactory : virtual public ProxyIfFactory {
 public:
  ProxyIfSingletonFactory(const boost::shared_ptr<ProxyIf>& iface) : iface_(iface) {}
  virtual ~ProxyIfSingletonFactory() {}

  virtual ProxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProxyIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProxyIf> iface_;
};

class ProxyNull : virtual public ProxyIf {
 public:
  virtual ~ProxyNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void getResult(std::string& /* _return */, const std::string& /* url */) {
    return;
  }
};


class Proxy_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Proxy_ping_args(const Proxy_ping_args&);
  Proxy_ping_args& operator=(const Proxy_ping_args&);
  Proxy_ping_args() {
  }

  virtual ~Proxy_ping_args() throw();

  bool operator == (const Proxy_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Proxy_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proxy_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Proxy_ping_args& obj);
};


class Proxy_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Proxy_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Proxy_ping_pargs& obj);
};

typedef struct _Proxy_ping_result__isset {
  _Proxy_ping_result__isset() : success(false) {}
  bool success :1;
} _Proxy_ping_result__isset;

class Proxy_ping_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Proxy_ping_result(const Proxy_ping_result&);
  Proxy_ping_result& operator=(const Proxy_ping_result&);
  Proxy_ping_result() : success(0) {
  }

  virtual ~Proxy_ping_result() throw();
  int32_t success;

  _Proxy_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Proxy_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proxy_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proxy_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Proxy_ping_result& obj);
};

typedef struct _Proxy_ping_presult__isset {
  _Proxy_ping_presult__isset() : success(false) {}
  bool success :1;
} _Proxy_ping_presult__isset;

class Proxy_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Proxy_ping_presult() throw();
  int32_t* success;

  _Proxy_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Proxy_ping_presult& obj);
};

typedef struct _Proxy_getResult_args__isset {
  _Proxy_getResult_args__isset() : url(false) {}
  bool url :1;
} _Proxy_getResult_args__isset;

class Proxy_getResult_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Proxy_getResult_args(const Proxy_getResult_args&);
  Proxy_getResult_args& operator=(const Proxy_getResult_args&);
  Proxy_getResult_args() : url() {
  }

  virtual ~Proxy_getResult_args() throw();
  std::string url;

  _Proxy_getResult_args__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const Proxy_getResult_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const Proxy_getResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proxy_getResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Proxy_getResult_args& obj);
};


class Proxy_getResult_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~Proxy_getResult_pargs() throw();
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Proxy_getResult_pargs& obj);
};

typedef struct _Proxy_getResult_result__isset {
  _Proxy_getResult_result__isset() : success(false) {}
  bool success :1;
} _Proxy_getResult_result__isset;

class Proxy_getResult_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  Proxy_getResult_result(const Proxy_getResult_result&);
  Proxy_getResult_result& operator=(const Proxy_getResult_result&);
  Proxy_getResult_result() : success() {
  }

  virtual ~Proxy_getResult_result() throw();
  std::string success;

  _Proxy_getResult_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Proxy_getResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Proxy_getResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Proxy_getResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Proxy_getResult_result& obj);
};

typedef struct _Proxy_getResult_presult__isset {
  _Proxy_getResult_presult__isset() : success(false) {}
  bool success :1;
} _Proxy_getResult_presult__isset;

class Proxy_getResult_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~Proxy_getResult_presult() throw();
  std::string* success;

  _Proxy_getResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Proxy_getResult_presult& obj);
};

class ProxyClient : virtual public ProxyIf {
 public:
  ProxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void getResult(std::string& _return, const std::string& url);
  void send_getResult(const std::string& url);
  void recv_getResult(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ProxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProxyProcessor(boost::shared_ptr<ProxyIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ProxyProcessor::process_ping;
    processMap_["getResult"] = &ProxyProcessor::process_getResult;
  }

  virtual ~ProxyProcessor() {}
};

class ProxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProxyProcessorFactory(const ::boost::shared_ptr< ProxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProxyIfFactory > handlerFactory_;
};

class ProxyMultiface : virtual public ProxyIf {
 public:
  ProxyMultiface(std::vector<boost::shared_ptr<ProxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProxyIf> > ifaces_;
  ProxyMultiface() {}
  void add(boost::shared_ptr<ProxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void getResult(std::string& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getResult(_return, url);
    }
    ifaces_[i]->getResult(_return, url);
    return;
  }

};

} // namespace

#endif
